# -*- coding: utf-8 -*-
"""global-trends-in-mental-health-problem-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hxrGcLPA8eixV9770AMHh2-nHpfl-TAy
"""


import pandas as pd
import matplotlib.pyplot as plt
import random
import streamlit as st

df = pd.read_csv('Mental health Depression disorder Data.csv', index_col='index', low_memory=False)
st.write(df.head())


"""
 initial dataframe details
"""
data_check_table = pd.DataFrame({
    'Unique':df.nunique(),
    'null':df.isna().sum(),
    'null percent':(df.isna().sum())/len(df)*100,
    'Type':df.dtypes.values
})
        
data_check_table

# df.dtypes

# df.duplicated().sum()

# duplicated_data = df[df.duplicated(keep='first')==True]
# duplicated_data.count()

# drop the duplicated rows, because in this analysis we don't need the duplicated datas.
# df.drop_duplicates(keep='first', inplace=True)

# check null values in df
# df[df.isna().any(axis=1)==True]      # here the null value is also present in 'Code' column, but this column does not affect much in analysis.

# create a new dataframe named 'req_df' to clean dataframe more effectively.
'''
    req_headers = ['Entity', 'Year', 'Schizophrenia (%)', 'Bipolar disorder (%)',
       'Eating disorders (%)', 'Anxiety disorders (%)',
       'Drug use disorders (%)', 'Depression (%)',
       'Alcohol use disorders (%)']
'''
req_headers = ['Entity', 'Year', 'Schizophrenia (%)', 'Bipolar disorder (%)',
       'Eating disorders (%)', 'Anxiety disorders (%)',
       'Drug use disorders (%)', 'Depression (%)',
       'Alcohol use disorders (%)']
req_df = df[req_headers]

'''
    dataframe with only required headers
'''
st.write(req_df.head())

# cleaning the 'req_df' more
# req_df.isna().any(axis=0).sum()             # checks the null value present in the row

# drop null values from dataframe
req_df.dropna(axis=0, inplace=True)

# check if any null values is still remaining 
# req_df.isna().sum()

# data_check stats



# converting the datatype of object as per necessity
def convert_str_to_float(x):
    if type(x)!=float:
        if x[0] in ['0','1','2','3','4','5','6','7','8','9']:
            return float(x)
        return float(0)
    return x

for i in req_df.columns[2:]:
    req_df[i]=req_df[i].apply(convert_str_to_float)

# for i in req_df.columns[2:]:
#     print(i)

# Exploratory Data Analysis
"""
    EDA on the mean of every issue with respect to Entity & Year
"""

# grouped datas
nation_group_issue_avg = req_df.groupby('Entity', as_index = False).agg({'Schizophrenia (%)':'mean', 'Bipolar disorder (%)':'mean','Eating disorders (%)':'mean', 'Anxiety disorders (%)':'mean', 'Drug use disorders (%)':'mean', 'Depression (%)':'mean', 'Alcohol use disorders (%)':'mean'})
'''
    Group required dataframe by nations
'''
st.write(nation_group_issue_avg)

for i in nation_group_issue_avg.columns[1:]:
    print(i)




colors = ['red', 'orange', 'purple']


for i in nation_group_issue_avg.columns[1:]:
    top_10_nation_group_issue_avg = nation_group_issue_avg.sort_values(by=i, ascending=False).head(10)
    
    # generates the random colors for bars in the figure.
    bar_colors = []
    for j in range(20):
        bar_colors.append(random.choice(colors))
        
    fig, ax = plt.subplots(figsize=(8,5))
    ax.bar(top_10_nation_group_issue_avg['Entity'],top_10_nation_group_issue_avg[i] , width=0.35, label=i, color=bar_colors)
    
    ax.set_ylabel('avg_mental_issue')
    ax.set_title(f"Top 10 average mental issue visualization for '{i}' by nations ")
    plt.xticks(rotation=90)
    ax.legend()
    
    plt.show()

    st.pyplot(fig)

